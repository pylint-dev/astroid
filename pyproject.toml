[build-system]
requires = ["setuptools~=62.6", "wheel~=0.37.1"]
build-backend = "setuptools.build_meta"

[project]
name        = "astroid"
license     = {text = "LGPL-2.1-or-later"}
description = "An abstract syntax tree for Python with inference support."
readme      = "README.rst"
authors     = [
    {name = "Python Code Quality Authority", email = "code-quality@python.org"}
]
keywords    = ["static code analysis", "python", "abstract syntax tree"]
classifiers = [
    "Development Status :: 6 - Mature",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]
requires-python = ">=3.7.2"
dependencies = [
    "lazy_object_proxy>=1.4.0",
    "wrapt>=1.14,<2;python_version>='3.11'",
    "wrapt>=1.11,<2;python_version<'3.11'",
    "typed-ast>=1.4.0,<2.0;implementation_name=='cpython' and python_version<'3.8'",
    "typing-extensions>=3.10;python_version<'3.10'",
]
dynamic = ["version"]

[project.urls]
"Docs"           = "https://pylint.pycqa.org/projects/astroid/en/latest/"
"Source Code"    = "https://github.com/PyCQA/astroid"
"Bug tracker"    = "https://github.com/PyCQA/astroid/issues"
"Discord server" = "https://discord.gg/Egy6P8AMB5"

[tool.setuptools]
license-files = ["LICENSE", "CONTRIBUTORS.txt"]  # Keep in sync with setup.cfg

[tool.setuptools.packages.find]
include = ["astroid*"]

[tool.setuptools.dynamic]
version = {attr = "astroid.__pkginfo__.__version__"}

[tool.aliases]
test = "pytest"

[tool.pytest.ini_options]
addopts = '-m "not acceptance"'
python_files = ["*test_*.py"]
testpaths = ["tests"]

[tool.isort]
include_trailing_comma = true
known_first_party = ["astroid"]
known_third_party = ["attr", "nose", "numpy", "pytest", "six", "sphinx"]
line_length = 88
multi_line_output = 3
skip_glob = ["tests/testdata"]

[tool.mypy]
enable_error_code = "ignore-without-code"
no_implicit_optional = true
scripts_are_modules = true
show_error_codes = true
warn_redundant_casts = true

[[tool.mypy.overrides]]
# Importlib typeshed stubs do not include the private functions we use
module = [
    "_io.*",
    "gi.*",
    "importlib.*",
    "lazy_object_proxy.*",
    "nose.*",
    "numpy.*",
    "pytest",
    "setuptools",
    "wrapt.*",
]
ignore_missing_imports = true

# === pylint ===

[tool.pylint.master]
# Specify a configuration file.
# rcfile=
# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
# init-hook=
# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore = "CVS"
# Pickle collected data for later comparisons.
persistent = true
# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.code_style",
    "pylint.extensions.set_membership",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.for_any_all",
]
# Use multiple processes to speed up Pylint.
jobs = 1
# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension = false
# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist = ""
# Minimum supported python version
py-version = "3.7.2"

[tool.pylint.reports]
# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format = "text"
# Tells whether to display a full report or only the messages
reports = false
# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
# msg-template=

[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence = ""
# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then re-enable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"
disable = [
    "fixme",
    "invalid-name",
    "missing-docstring",
    "too-few-public-methods",
    "too-many-public-methods",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-statements",
    # We know about it and we're doing our best to remove it in 2.0 (oups)
    "cyclic-import",
    # Requires major redesign for fixing this (and private
    # access in the same project is fine)
    "protected-access",
    # API requirements in most of the occurrences
    "unused-argument",
    # black handles these
    "format",
    # We might want to disable new checkers from master that do not exists
    # in latest published pylint
    "bad-option-value",
    # Legacy warning not checked in astroid/brain before we
    # transitioned to setuptools and added an init.py
    "duplicate-code",
    # This one would help performance but we need to fix the pipeline first
    # and there are a lot of warning for it
    "consider-using-f-string",
]
enable = "useless-suppression"

[tool.pylint.basic]
# List of builtins function names that should not be used, separated by a comma
bad-functions = ""
# Good variable names which should always be accepted, separated by a comma
good-names = "i,j,k,e,ex,f,m,cm,Run,_,n,op,it"
# Bad variable names which should always be refused, separated by a comma
bad-names = "foo,bar,baz,toto,tutu,tata"
# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group = ""
# Include a hint for the correct naming format with invalid-name
include-naming-hint = false
# Regular expression matching correct attribute names
attr-rgx = "[a-z_][a-z0-9_]{2,30}$"
# Regular expression matching correct constant names
const-rgx = "(([A-Z_][A-Z0-9_]*)|(__.*__))$"
# Regular expression matching correct method names
method-rgx = "[a-z_][a-z0-9_]{2,30}$"
# Regular expression matching correct inline iteration names
inlinevar-rgx = "[A-Za-z_][A-Za-z0-9_]*$"
# Regular expression matching correct class names
class-rgx = "[A-Z_][a-zA-Z0-9]+$"
# Regular expression matching correct argument names
argument-rgx = "[a-z_][a-z0-9_]{2,30}$"
# Regular expression matching correct module names
module-rgx = "(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
# Regular expression matching correct function names
function-rgx = "[a-z_][a-z0-9_]{2,30}$"
# Regular expression matching correct variable names
variable-rgx = "[a-z_][a-z0-9_]{2,30}$"
# Regular expression matching correct class attribute names
class-attribute-rgx = "([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$"
# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx = "__.*__"
# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length = -1

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 100
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = "'^\s*(' # )?<?https?://\S+>?$"
# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt = false
# Maximum number of lines in a module
max-module-lines = 3000
# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1
# tab).
indent-string = "'    '"
# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format = ""

[tool.pylint.logging]
# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules = "logging"

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = "FIXME,XXX,TODO"

[tool.pylint.similarities]
# Minimum lines number of a similarity.
min-similarity-lines = 4
# Ignore comments when computing similarities.
ignore-comments = true
# Ignore docstrings when computing similarities.
ignore-docstrings = true
# Ignore imports when computing similarities.
ignore-imports = true

[tool.pylint.SPELLING]
# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
spelling-dict = ""
# List of comma separated words that should not be checked.
spelling-ignore-words = ""
# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file = ""
# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words = false

[tool.pylint.typecheck]
ignore-on-opaque-inference = "n"
# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members = true
# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis
ignored-modules = "typed_ast.ast3"
# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set).
ignored-classes = "SQLObject"
# Regex pattern to define which classes are considered mixins.
mixin-class-rgx = ".*Mix[Ii]n"
# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed. Python regular
# expressions are accepted.
# TODO: Remove ast.Match pattern once https://github.com/PyCQA/pylint/issues/6594 is fixed
generated-members = 'REQUEST,acl_users,aq_parent,argparse.Namespace,ast\.([mM]atch.*|pattern)'

[tool.pylint.variables]
# Tells whether we should check for unused import in __init__ files.
init-import = false
# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx = "_$|dummy"
# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins = ""
# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks = "cb_,_cb"

[tool.pylint.classes]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = "__init__,__new__,setUp"
# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = "cls"
# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = "mcs"
# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = "_asdict,_fields,_replace,_source,_make"

[tool.pylint.design]
# Maximum number of arguments for function / method
max-args = 10
# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names = "_.*"
# Maximum number of locals for function / method body
max-locals = 25
# Maximum number of return / yield for function / method body
max-returns = 10
# Maximum number of branch for function / method body
max-branches = 25
# Maximum number of statements in function / method body
max-statements = 60
# Maximum number of parents for a class (see R0901).
max-parents = 10
# Maximum number of attributes for a class (see R0902).
max-attributes = 15
# Minimum number of public methods for a class (see R0903).
min-public-methods = 2
# Maximum number of public methods for a class (see R0904).
max-public-methods = 20

[tool.pylint.imports]
# Deprecated modules which should not be used, separated by a comma
deprecated-modules = "stringprep,optparse"
# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph = ""
# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph = ""
# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph = ""

[tool.pylint.exceptions]
# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions = "Exception"

[tool.pylint.typing]
# Annotations are used exclusively for type checking
runtime-typing = false
